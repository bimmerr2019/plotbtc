#!/usr/bin/env python3

import curses
import os
from datetime import datetime, timedelta

def plot_data(screen):
    home_dir = os.environ["HOME"]
    # Read data from the file
    data = []
    try:
        with open(home_dir + "/btc_history.txt", "r") as file:
            prev_timestamp = None
            prev_price = None
            for line in file:
                parts = line.strip().split()
                if len(parts) >= 3:
                    timestamp = datetime.strptime(parts[0] + " " + parts[1], "%Y-%m-%d %H:%M:%S")
                    price = float(parts[2])
                    
                    if prev_timestamp is not None:
                        # Calculate the time difference between the current and previous data points
                        time_diff = (timestamp - prev_timestamp).total_seconds()
                        
                        # If the time difference is greater than 5 minutes, fill in the missing data points
                        if time_diff > 300:
                            num_missing_points = int(time_diff // 300) - 1
                            for i in range(num_missing_points):
                                missing_timestamp = prev_timestamp + timedelta(minutes=5 * (i + 1))
                                data.append((missing_timestamp, prev_price))
                    
                    data.append((timestamp, price))
                    prev_timestamp = timestamp
                    prev_price = price
    except FileNotFoundError:
        #print("File not found.")
        exit()

    # Limit data to 1440 points if there are more, this should be about 5 days
    N = 1400
    if len(data) > N:
        data = data[len(data)-N:]

    # Print the data
    for d in data:
        print(d[0], d[1])

    # Check if there are at least two data points
    if len(data) < 2:
        #print("Insufficient data points to plot.")
        exit()

    # Extract time and price from the data
    times = [d[0] for d in data]
    prices = [d[1] / 1000 for d in data]

    # Get the screen dimensions
    height, width = screen.getmaxyx()

    # Calculate the scaling factors
    min_price = min(prices)
    max_price = max(prices)
    price_range = max_price - min_price
    price_scale = (height - 8) / price_range

    # Plot the data
    for i in range(len(prices)):
        x = i * (width - 12) // (len(prices) - 1) + 6
        y = int((prices[i] - min_price) * price_scale) + 4
        screen.addstr(height - y, x, ".")

    # Draw the axes
    screen.addstr(height - 4, 0, "+" + "-" * (width - 2) + "+")

    # Mark the y-axis with price labels
    y_ticks = [min_price + i * price_range / 4 for i in range(5)]
    for tick in y_ticks:
        y = int((tick - min_price) * price_scale) + 4
        screen.addstr(height - y, 0, f"{tick:.1f}")

    # Mark the x-axis with time labels and day of the week
    x_ticks = [times[i * (len(times) - 1) // 4] for i in range(5)]
    for tick in x_ticks:
        x = (times.index(tick) * (width - 12) // (len(prices) - 1)) + 6
        screen.addstr(height - 1, x, tick.strftime("%H:%M"))
        screen.addstr(height - 3, x, tick.strftime("%a"))  # Display day of the week

    # Draw horizontal grid lines
    for i in range(1, 4):
        y = int(height - 4 - i * (height - 8) / 4)
        screen.addstr(y, 0, "-" * (width - 1))

    # Draw vertical grid lines
    for i in range(1, 4):
        x = i * (width - 12) // 4 + 6
        for y in range(4, height - 4):
            screen.addstr(y, x, "|")

    # Display prices on the top right
    if len(prices) > 0:
        open_price = prices[0]
        high_price = max(prices)
        low_price = min(prices)
        last_price = prices[-1]

        price_info = [
            f"Open: {open_price:.1f}",
            f"High: {high_price:.1f}",
            f"Low: {low_price:.1f}",
            f"Last: {last_price:.1f}"
        ]

        max_price_width = max(len(info) for info in price_info)
        for i, info in enumerate(price_info):
            screen.addstr(i, width - max_price_width - 1, info)

    # Display the title in the top center
    title = "Bitcoin Price Chart from local data"
    screen.addstr(0, (width - len(title)) // 2, title)

    # Display the plot
    screen.refresh()
    screen.getch()


curses.wrapper(plot_data)
