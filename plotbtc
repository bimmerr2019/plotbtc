#!/usr/bin/env python3

import curses
import os
from datetime import datetime, timedelta

def read_data():
    home_dir = os.environ["HOME"]
    data = []
    try:
        with open(home_dir + "/btc_history.txt", "r") as file:
            prev_timestamp = None
            prev_price = None
            delta_times = []
            
            for line in file:
                parts = line.strip().split()
                if len(parts) >= 3:
                    timestamp = datetime.strptime(parts[0] + " " + parts[1], "%Y-%m-%d %H:%M:%S")
                    price = float(parts[2])
                    
                    if prev_timestamp is not None:
                        delta_time = (timestamp - prev_timestamp).total_seconds()
                        delta_times.append(delta_time)
                        
                        if len(delta_times) >= 5:
                            avg_spacing = sum(delta_times) / len(delta_times)
                            
                            if delta_time > avg_spacing:
                                num_missing_points = int(delta_time // avg_spacing) - 1
                                for i in range(num_missing_points):
                                    missing_timestamp = prev_timestamp + timedelta(seconds=avg_spacing * (i + 1))
                                    data.append((missing_timestamp, prev_price))
                    
                    data.append((timestamp, price))
                    prev_timestamp = timestamp
                    prev_price = price
    except FileNotFoundError:
        print("File ~/btc_history.txt not found.")
        exit()

    # Check if there are at least two data points
    if len(data) < 2:
        print("File ~/btc_history.txt only has one data point, not enough to plot.")
        exit()

    # Limit data to approximately 5 days if there are more data points
    # Limit data to 1440 points.
    N=1440
    if len(delta_times) >= 5:
        avg_spacing = sum(delta_times) / len(delta_times)
        # if len(data) > 5 * 24 * 60 * 60 / avg_spacing:
        #     data = data[len(data) - int(5 * 24 * 60 * 60 / avg_spacing):]
        if len(data) > N:
            data = data[len(data) - N:]

    return data

def plot_data(screen,data):

    # Extract time and price from the data
    times = [d[0] for d in data]
    prices = [d[1] / 1000 for d in data]

    # Get the screen dimensions
    height, width = screen.getmaxyx()

    # Calculate the scaling factors
    min_price = min(prices)
    max_price = max(prices)
    price_range = max_price - min_price
    price_scale = (height - 8) / price_range

    # Plot the data
    for i in range(len(prices)):
        x = i * (width - 12) // (len(prices) - 1) + 6
        y = int((prices[i] - min_price) * price_scale) + 4
        screen.addstr(height - y, x, ".")

    # Draw the axes
    screen.addstr(height - 4, 0, "+" + "-" * (width - 2) + "+")

    # Mark the y-axis with price labels
    y_ticks = [min_price + i * price_range / 4 for i in range(5)]
    for tick in y_ticks:
        y = int((tick - min_price) * price_scale) + 4
        screen.addstr(height - y, 0, f"{tick:.1f}")

    # Mark the x-axis with time labels and day of the week
    x_ticks = [times[i * (len(times) - 1) // 4] for i in range(5)]
    for tick in x_ticks:
        x = (times.index(tick) * (width - 12) // (len(prices) - 1)) + 6
        screen.addstr(height - 1, x, tick.strftime("%H:%M"))
        screen.addstr(height - 3, x, tick.strftime("%a"))  # Display day of the week

    # Draw horizontal grid lines
    for i in range(1, 4):
        y = int(height - 4 - i * (height - 8) / 4)
        screen.addstr(y, 0, "-" * (width - 1))

    # Draw vertical grid lines
    for i in range(1, 4):
        x = i * (width - 12) // 4 + 6
        for y in range(4, height - 4):
            screen.addstr(y, x, "|")

    # Display prices on the top right
    if len(prices) > 0:
        open_price = prices[0]
        high_price = max(prices)
        low_price = min(prices)
        last_price = prices[-1]

        price_info = [
            f"Open: {open_price:.1f}",
            f"High: {high_price:.1f}",
            f"Low: {low_price:.1f}",
            f"Last: {last_price:.1f}"
        ]

        max_price_width = max(len(info) for info in price_info)
        for i, info in enumerate(price_info):
            screen.addstr(i, width - max_price_width - 1, info)

    # Display the title in the top center
    title = "Bitcoin Price Chart from stored waybar data"
    screen.addstr(0, (width - len(title)) // 2, title)

    # Calculate the actual time delta between data points and display it on the left.
    if len(data) >= 2:
        total_delta = (data[-1][0] - data[0][0]).total_seconds()
        avg_delta = total_delta / (len(data) - 1)

        # Determine the appropriate time unit based on the average delta
        if avg_delta < 60:
            time_unit = "Second"
            time_delta = int(avg_delta)
        elif avg_delta < 3600:
            time_unit = "Minute"
            time_delta = int(avg_delta // 60)
        elif avg_delta < 86400:
            time_unit = "Hour"
            time_delta = int(avg_delta // 3600)
        else:
            time_unit = "Day"
            time_delta = int(avg_delta // 86400)

        # Display the time delta in the upper left corner
        screen.addstr(0, 0, f"{time_delta} {time_unit} Chart, {len(data)} data points")

    # Display the plot
    screen.refresh()
    screen.getch()


# Read the data outside the plot_data function
data = read_data()

# # Print the data for error checking
# for d in data:
#     print(d[0], d[1])

curses.wrapper(lambda screen: plot_data(screen, data))
